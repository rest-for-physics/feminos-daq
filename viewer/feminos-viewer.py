#!/usr/bin/env python3

from __future__ import annotations

import tkinter as tk
from tkinter import filedialog, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import uproot
import awkward as ak
import requests
import re
import numpy as np
import threading
from collections import OrderedDict, defaultdict
import time
import mplhep as hep
from tkinter import simpledialog
from numba import njit
from tkinter import font
from matplotlib import colors as mcolors
import argparse

hep.style.use(hep.style.CMS)

plt.rcParams.update({"font.size": 14})

lock = threading.Lock()


class LimitedOrderedDict(OrderedDict):
    # An OrderedDict that has a maximum size and removes the oldest item when the size is exceeded
    def __init__(self, max_size):
        super().__init__()
        self.max_size = max_size

    def __setitem__(self, key, value):
        if len(self) >= self.max_size:
            # Remove the oldest item (the first item in the OrderedDict)
            self.popitem(last=False)
        super().__setitem__(key, value)


plt.rcParams["axes.prop_cycle"] = plt.cycler(color=plt.cm.Set1.colors)

jet = plt.get_cmap("jet")


# Create a new colormap that starts with white and then transitions to 'jet'
def white_to_jet(n):
    # n is the number of colors in the colormap
    # Create an array of colors with the same length as n
    colors = np.zeros((n, 4))  # RGBA

    # Fill the first row with white
    colors[0] = [1, 1, 1, 1]

    # Fill the rest with the 'jet' colormap
    for i in range(1, n):
        colors[i] = jet(i / (n - 1))

    return mcolors.ListedColormap(colors)


white_jet = white_to_jet(256)

# TODO: https://github.com/rest-for-physics/feminos-daq/issues/3
readouts = {
    "IAXO-D0": {
        "mapping": {
            4323: ("X", 30),
            4324: ("X", 29.5),
            4325: ("X", 29),
            4326: ("X", 28.5),
            4327: ("X", 28),
            4328: ("X", 27.5),
            4329: ("X", 27),
            4330: ("X", 26.5),
            4331: ("X", 26),
            4332: ("X", 25.5),
            4334: ("X", 25),
            4335: ("X", 24.5),
            4336: ("X", 24),
            4337: ("X", 23.5),
            4339: ("X", 23),
            4340: ("X", 22.5),
            4341: ("X", 22),
            4342: ("X", 21.5),
            4343: ("X", 21),
            4345: ("X", 20.5),
            4346: ("X", 20),
            4347: ("X", 19.5),
            4348: ("X", 19),
            4349: ("X", 18.5),
            4350: ("X", 18),
            4351: ("X", 17.5),
            4352: ("X", 17),
            4353: ("X", 16.5),
            4354: ("X", 16),
            4355: ("X", 15.5),
            4356: ("X", 15),
            4357: ("X", 14.5),
            4358: ("X", 14),
            4359: ("X", 13.5),
            4360: ("X", 13),
            4361: ("X", 12.5),
            4362: ("X", 12),
            4363: ("X", 11.5),
            4364: ("X", 11),
            4365: ("X", 10.5),
            4366: ("X", 10),
            4368: ("X", 9.5),
            4369: ("X", 9),
            4370: ("X", 8.5),
            4371: ("X", 8),
            4372: ("X", 7.5),
            4374: ("X", 7),
            4375: ("X", 6.5),
            4376: ("X", 6),
            4377: ("X", 5.5),
            4379: ("X", 5),
            4380: ("X", 4.5),
            4381: ("X", 4),
            4382: ("X", 3.5),
            4383: ("X", 3),
            4384: ("X", 2.5),
            4385: ("X", 2),
            4386: ("X", 1.5),
            4387: ("X", 1),
            4388: ("X", 0.5),
            4395: ("X", 0),
            4396: ("X", -0.5),
            4397: ("X", -1),
            4398: ("X", -1.5),
            4399: ("X", -2),
            4400: ("X", -2.5),
            4401: ("X", -3),
            4402: ("X", -3.5),
            4403: ("X", -4),
            4404: ("X", -4.5),
            4406: ("X", -5),
            4407: ("X", -5.5),
            4408: ("X", -6),
            4409: ("X", -6.5),
            4411: ("X", -7),
            4412: ("X", -7.5),
            4413: ("X", -8),
            4414: ("X", -8.5),
            4415: ("X", -9),
            4417: ("X", -9.5),
            4418: ("X", -10),
            4419: ("X", -10.5),
            4420: ("X", -11),
            4421: ("X", -11.5),
            4422: ("X", -12),
            4423: ("X", -12.5),
            4424: ("X", -13),
            4425: ("X", -13.5),
            4426: ("X", -14),
            4427: ("X", -14.5),
            4428: ("X", -15),
            4429: ("X", -15.5),
            4430: ("X", -16),
            4431: ("X", -16.5),
            4432: ("X", -17),
            4433: ("X", -17.5),
            4434: ("X", -18),
            4435: ("X", -18.5),
            4436: ("X", -19),
            4437: ("X", -19.5),
            4438: ("X", -20),
            4440: ("X", -20.5),
            4441: ("X", -21),
            4442: ("X", -21.5),
            4443: ("X", -22),
            4444: ("X", -22.5),
            4446: ("X", -23),
            4447: ("X", -23.5),
            4448: ("X", -24),
            4449: ("X", -24.5),
            4451: ("X", -25),
            4452: ("X", -25.5),
            4453: ("X", -26),
            4454: ("X", -26.5),
            4455: ("X", -27),
            4456: ("X", -27.5),
            4457: ("X", -28),
            4458: ("X", -28.5),
            4459: ("X", -29),
            4460: ("X", -29.5),
            4467: ("Y", 29.125),
            4468: ("Y", 29.9375),
            4469: ("Y", 28.125),
            4470: ("Y", 28.625),
            4471: ("Y", 27.125),
            4472: ("Y", 27.625),
            4473: ("Y", 26.125),
            4474: ("Y", 26.625),
            4475: ("Y", 25.125),
            4476: ("Y", 25.625),
            4478: ("Y", 24.125),
            4479: ("Y", 24.625),
            4480: ("Y", 23.125),
            4481: ("Y", 23.625),
            4483: ("Y", 22.125),
            4484: ("Y", 22.625),
            4485: ("Y", 21.125),
            4486: ("Y", 21.625),
            4487: ("Y", 20.125),
            4489: ("Y", 20.625),
            4490: ("Y", 19.125),
            4491: ("Y", 19.625),
            4492: ("Y", 18.125),
            4493: ("Y", 18.625),
            4494: ("Y", 17.125),
            4495: ("Y", 17.625),
            4496: ("Y", 16.125),
            4497: ("Y", 16.625),
            4498: ("Y", 15.125),
            4499: ("Y", 15.625),
            4500: ("Y", 14.125),
            4501: ("Y", 14.625),
            4502: ("Y", 13.125),
            4503: ("Y", 13.625),
            4504: ("Y", 12.125),
            4505: ("Y", 12.625),
            4506: ("Y", 11.125),
            4507: ("Y", 11.625),
            4508: ("Y", 10.125),
            4509: ("Y", 10.625),
            4510: ("Y", 9.125),
            4512: ("Y", 9.625),
            4513: ("Y", 8.125),
            4514: ("Y", 8.625),
            4515: ("Y", 7.125),
            4516: ("Y", 7.625),
            4518: ("Y", 6.125),
            4519: ("Y", 6.625),
            4520: ("Y", 5.125),
            4521: ("Y", 5.625),
            4523: ("Y", 4.125),
            4524: ("Y", 4.625),
            4525: ("Y", 3.125),
            4526: ("Y", 3.625),
            4527: ("Y", 2.125),
            4528: ("Y", 2.625),
            4529: ("Y", 1.125),
            4530: ("Y", 1.625),
            4531: ("Y", 0.125),
            4532: ("Y", 0.625),
            4539: ("Y", -0.875),
            4540: ("Y", -0.375),
            4541: ("Y", -1.875),
            4542: ("Y", -1.375),
            4543: ("Y", -2.875),
            4544: ("Y", -2.375),
            4545: ("Y", -3.875),
            4546: ("Y", -3.375),
            4547: ("Y", -4.875),
            4548: ("Y", -4.375),
            4550: ("Y", -5.875),
            4551: ("Y", -5.375),
            4552: ("Y", -6.875),
            4553: ("Y", -6.375),
            4555: ("Y", -7.875),
            4556: ("Y", -7.375),
            4557: ("Y", -8.875),
            4558: ("Y", -8.375),
            4559: ("Y", -9.875),
            4561: ("Y", -9.375),
            4562: ("Y", -10.875),
            4563: ("Y", -10.375),
            4564: ("Y", -11.875),
            4565: ("Y", -11.375),
            4566: ("Y", -12.875),
            4567: ("Y", -12.375),
            4568: ("Y", -13.875),
            4569: ("Y", -13.375),
            4570: ("Y", -14.875),
            4571: ("Y", -14.375),
            4572: ("Y", -15.875),
            4573: ("Y", -15.375),
            4574: ("Y", -16.875),
            4575: ("Y", -16.375),
            4576: ("Y", -17.875),
            4577: ("Y", -17.375),
            4578: ("Y", -18.875),
            4579: ("Y", -18.375),
            4580: ("Y", -19.875),
            4581: ("Y", -19.375),
            4582: ("Y", -20.875),
            4584: ("Y", -20.375),
            4585: ("Y", -21.875),
            4586: ("Y", -21.375),
            4587: ("Y", -22.875),
            4588: ("Y", -22.375),
            4590: ("Y", -23.875),
            4591: ("Y", -23.375),
            4592: ("Y", -24.875),
            4593: ("Y", -24.375),
            4595: ("Y", -25.875),
            4596: ("Y", -25.375),
            4597: ("Y", -26.875),
            4598: ("Y", -26.375),
            4599: ("Y", -27.875),
            4600: ("Y", -27.375),
            4601: ("Y", -28.875),
            4602: ("Y", -28.375),
            4603: ("Y", -29.8125),
            4604: ("Y", -29.375),
        },
    },
    "IAXO-D1": {
        "mapping": {
            4323: ("Y", 2.625),
            4324: ("Y", 2.125),
            4325: ("Y", 0.125),
            4326: ("Y", 0.625),
            4327: ("Y", 1.125),
            4328: ("Y", 1.625),
            4330: ("Y", 6.625),
            4331: ("Y", 6.125),
            4332: ("Y", 3.125),
            4334: ("Y", 3.625),
            4335: ("Y", 4.125),
            4336: ("Y", 4.625),
            4337: ("Y", 5.125),
            4338: ("Y", 5.625),
            4339: ("Y", 10.625),
            4340: ("Y", 10.125),
            4341: ("Y", 7.125),
            4342: ("Y", 7.625),
            4343: ("Y", 8.125),
            4345: ("Y", 8.625),
            4346: ("Y", 9.125),
            4347: ("Y", 9.625),
            4348: ("Y", 14.625),
            4349: ("Y", 14.125),
            4350: ("Y", 11.125),
            4351: ("Y", 11.625),
            4352: ("Y", 12.125),
            4353: ("Y", 12.625),
            4354: ("Y", 13.125),
            4355: ("Y", 13.625),
            4356: ("Y", 18.625),
            4357: ("Y", 18.125),
            4358: ("Y", 15.125),
            4359: ("Y", 15.625),
            4360: ("Y", 16.125),
            4361: ("Y", 16.625),
            4362: ("Y", 17.125),
            4363: ("Y", 17.625),
            4364: ("Y", 22.625),
            4365: ("Y", 22.125),
            4366: ("Y", 19.125),
            4368: ("Y", 19.625),
            4369: ("Y", 20.125),
            4370: ("Y", 20.625),
            4371: ("Y", 21.125),
            4372: ("Y", 21.625),
            4373: ("Y", 26.625),
            4374: ("Y", 26.125),
            4375: ("Y", 23.125),
            4376: ("Y", 23.625),
            4377: ("Y", 24.125),
            4379: ("Y", 24.625),
            4380: ("Y", 25.125),
            4381: ("Y", 25.625),
            4383: ("Y", 27.125),
            4384: ("Y", 27.625),
            4385: ("Y", 28.125),
            4386: ("Y", 28.625),
            4387: ("Y", 29.125),
            4388: ("Y", 29.9375),
            4395: ("Y", -29.8125),
            4396: ("Y", -29.375),
            4397: ("Y", -28.875),
            4398: ("Y", -28.375),
            4399: ("Y", -27.875),
            4400: ("Y", -27.375),
            4402: ("Y", -26.875),
            4403: ("Y", -26.375),
            4404: ("Y", -23.375),
            4406: ("Y", -23.875),
            4407: ("Y", -24.375),
            4408: ("Y", -24.875),
            4409: ("Y", -25.375),
            4410: ("Y", -25.875),
            4411: ("Y", -22.875),
            4412: ("Y", -22.375),
            4413: ("Y", -19.375),
            4414: ("Y", -19.875),
            4415: ("Y", -20.375),
            4417: ("Y", -20.875),
            4418: ("Y", -21.375),
            4419: ("Y", -21.875),
            4420: ("Y", -18.875),
            4421: ("Y", -18.375),
            4422: ("Y", -15.375),
            4423: ("Y", -15.875),
            4424: ("Y", -16.375),
            4425: ("Y", -16.875),
            4426: ("Y", -17.375),
            4427: ("Y", -17.875),
            4428: ("Y", -14.875),
            4429: ("Y", -14.375),
            4430: ("Y", -11.375),
            4431: ("Y", -11.875),
            4432: ("Y", -12.375),
            4433: ("Y", -12.875),
            4434: ("Y", -13.375),
            4435: ("Y", -13.875),
            4436: ("Y", -10.875),
            4437: ("Y", -10.375),
            4438: ("Y", -7.375),
            4440: ("Y", -7.875),
            4441: ("Y", -8.375),
            4442: ("Y", -8.875),
            4443: ("Y", -9.375),
            4444: ("Y", -9.875),
            4445: ("Y", -6.875),
            4446: ("Y", -6.375),
            4447: ("Y", -3.375),
            4448: ("Y", -3.875),
            4449: ("Y", -4.375),
            4451: ("Y", -4.875),
            4452: ("Y", -5.375),
            4453: ("Y", -5.875),
            4455: ("Y", -2.875),
            4456: ("Y", -2.375),
            4457: ("Y", -0.375),
            4458: ("Y", -0.875),
            4459: ("Y", -1.375),
            4460: ("Y", -1.875),
            4467: ("X", -2.5),
            4468: ("X", -2),
            4469: ("X", 0),
            4470: ("X", -0.5),
            4471: ("X", -1),
            4472: ("X", -1.5),
            4474: ("X", -6.5),
            4475: ("X", -6),
            4476: ("X", -3),
            4478: ("X", -3.5),
            4479: ("X", -4),
            4480: ("X", -4.5),
            4481: ("X", -5),
            4482: ("X", -5.5),
            4483: ("X", -10.5),
            4484: ("X", -10),
            4485: ("X", -7),
            4486: ("X", -7.5),
            4487: ("X", -8),
            4489: ("X", -8.5),
            4490: ("X", -9),
            4491: ("X", -9.5),
            4492: ("X", -14.5),
            4493: ("X", -14),
            4494: ("X", -11),
            4495: ("X", -11.5),
            4496: ("X", -12),
            4497: ("X", -12.5),
            4498: ("X", -13),
            4499: ("X", -13.5),
            4500: ("X", -18.5),
            4501: ("X", -18),
            4502: ("X", -15),
            4503: ("X", -15.5),
            4504: ("X", -16),
            4505: ("X", -16.5),
            4506: ("X", -17),
            4507: ("X", -17.5),
            4508: ("X", -22.5),
            4509: ("X", -22),
            4510: ("X", -19),
            4512: ("X", -19.5),
            4513: ("X", -20),
            4514: ("X", -20.5),
            4515: ("X", -21),
            4516: ("X", -21.5),
            4517: ("X", -26.5),
            4518: ("X", -26),
            4519: ("X", -23),
            4520: ("X", -23.5),
            4521: ("X", -24),
            4523: ("X", -24.5),
            4524: ("X", -25),
            4525: ("X", -25.5),
            4527: ("X", -27),
            4528: ("X", -27.5),
            4529: ("X", -28),
            4530: ("X", -28.5),
            4531: ("X", -29),
            4532: ("X", -29.5),
            4539: ("X", 27.5),
            4540: ("X", 28),
            4541: ("X", 28.5),
            4542: ("X", 29),
            4543: ("X", 29.5),
            4544: ("X", 30),
            4546: ("X", 27),
            4547: ("X", 26.5),
            4548: ("X", 23.5),
            4550: ("X", 24),
            4551: ("X", 24.5),
            4552: ("X", 25),
            4553: ("X", 25.5),
            4554: ("X", 26),
            4555: ("X", 23),
            4556: ("X", 22.5),
            4557: ("X", 19.5),
            4558: ("X", 20),
            4559: ("X", 20.5),
            4561: ("X", 21),
            4562: ("X", 21.5),
            4563: ("X", 22),
            4564: ("X", 19),
            4565: ("X", 18.5),
            4566: ("X", 15.5),
            4567: ("X", 16),
            4568: ("X", 16.5),
            4569: ("X", 17),
            4570: ("X", 17.5),
            4571: ("X", 18),
            4572: ("X", 15),
            4573: ("X", 14.5),
            4574: ("X", 11.5),
            4575: ("X", 12),
            4576: ("X", 12.5),
            4577: ("X", 13),
            4578: ("X", 13.5),
            4579: ("X", 14),
            4580: ("X", 11),
            4581: ("X", 10.5),
            4582: ("X", 7.5),
            4584: ("X", 8),
            4585: ("X", 8.5),
            4586: ("X", 9),
            4587: ("X", 9.5),
            4588: ("X", 10),
            4589: ("X", 7),
            4590: ("X", 6.5),
            4591: ("X", 3.5),
            4592: ("X", 4),
            4593: ("X", 4.5),
            4595: ("X", 5),
            4596: ("X", 5.5),
            4597: ("X", 6),
            4599: ("X", 3),
            4600: ("X", 2.5),
            4601: ("X", 0.5),
            4602: ("X", 1),
            4603: ("X", 1.5),
            4604: ("X", 2),
        }
    },
    "TREX-DM-L": {
        "mapping": {
            578: ("Y", -115.92),
            579: ("Y", -117.84),
            580: ("Y", -119.76),
            582: ("Y", -112.08),
            583: ("Y", -114),
            584: ("Y", -108.24),
            585: ("Y", -110.16),
            586: ("Y", -104.4),
            587: ("Y", -106.32),
            588: ("Y", -100.56),
            590: ("Y", -102.48),
            591: ("Y", -92.88),
            592: ("Y", -121.68),
            593: ("Y", -96.72),
            594: ("Y", -98.64),
            595: ("Y", -87.12),
            596: ("Y", -85.2),
            597: ("Y", -90.96),
            598: ("Y", -89.04),
            599: ("Y", -83.28),
            601: ("Y", -81.36),
            602: ("Y", -79.44),
            603: ("Y", -77.52),
            604: ("Y", -75.6),
            605: ("Y", -73.68),
            606: ("Y", -71.76),
            607: ("Y", -69.84),
            608: ("Y", -64.08),
            609: ("Y", -62.16),
            610: ("Y", -67.92),
            611: ("Y", -66),
            612: ("Y", -56.4),
            613: ("Y", -54.48),
            614: ("Y", -60.24),
            615: ("Y", -58.32),
            616: ("Y", -52.56),
            617: ("Y", -50.64),
            618: ("Y", -48.72),
            619: ("Y", -46.8),
            620: ("Y", -44.88),
            621: ("Y", -42.96),
            622: ("Y", -41.04),
            624: ("Y", -39.12),
            625: ("Y", -33.36),
            626: ("Y", -31.44),
            627: ("Y", -37.2),
            628: ("Y", -35.28),
            629: ("Y", -23.76),
            630: ("Y", -25.68),
            631: ("Y", -27.6),
            632: ("Y", -29.52),
            633: ("Y", -19.92),
            635: ("Y", -21.84),
            636: ("Y", -16.08),
            637: ("Y", -18),
            638: ("Y", -12.24),
            639: ("Y", -14.16),
            640: ("Y", -8.4),
            641: ("Y", -10.32),
            642: ("Y", -0.72),
            643: ("Y", -2.64),
            644: ("Y", -4.56),
            645: ("Y", -6.48),
            650: ("Y", 6.96),
            651: ("Y", 5.04),
            652: ("Y", 3.12),
            653: ("Y", 1.2),
            654: ("Y", 10.8),
            655: ("Y", 8.88),
            656: ("Y", 14.64),
            657: ("Y", 12.72),
            658: ("Y", 18.48),
            659: ("Y", 16.56),
            660: ("Y", 22.32),
            662: ("Y", 20.4),
            663: ("Y", 30),
            664: ("Y", 28.08),
            665: ("Y", 26.16),
            666: ("Y", 24.24),
            667: ("Y", 35.76),
            668: ("Y", 37.68),
            669: ("Y", 31.92),
            670: ("Y", 33.84),
            671: ("Y", 39.6),
            673: ("Y", 41.52),
            674: ("Y", 43.44),
            675: ("Y", 45.36),
            676: ("Y", 47.28),
            677: ("Y", 49.2),
            678: ("Y", 51.12),
            679: ("Y", 53.04),
            680: ("Y", 58.8),
            681: ("Y", 60.72),
            682: ("Y", 54.96),
            683: ("Y", 56.88),
            684: ("Y", 66.48),
            685: ("Y", 68.4),
            686: ("Y", 62.64),
            687: ("Y", 64.56),
            688: ("Y", 70.32),
            689: ("Y", 72.24),
            690: ("Y", 74.16),
            691: ("Y", 76.08),
            692: ("Y", 78),
            693: ("Y", 79.92),
            694: ("Y", 81.84),
            696: ("Y", 83.76),
            697: ("Y", 89.52),
            698: ("Y", 91.44),
            699: ("Y", 85.68),
            700: ("Y", 87.6),
            701: ("Y", 99.12),
            702: ("Y", 97.2),
            703: ("Y", 95.28),
            704: ("Y", 93.36),
            705: ("Y", 102.96),
            707: ("Y", 101.04),
            708: ("Y", 106.8),
            709: ("Y", 104.88),
            710: ("Y", 110.64),
            711: ("Y", 108.72),
            712: ("Y", 114.48),
            713: ("Y", 112.56),
            714: ("Y", 122.76),
            715: ("Y", 120.24),
            716: ("Y", 118.32),
            717: ("Y", 116.4),
            722: ("X", 6.72),
            723: ("X", 4.8),
            724: ("X", 2.88),
            725: ("X", 0.96),
            726: ("X", 10.56),
            727: ("X", 8.64),
            728: ("X", 14.4),
            729: ("X", 12.48),
            730: ("X", 18.24),
            731: ("X", 16.32),
            732: ("X", 22.08),
            734: ("X", 20.16),
            735: ("X", 29.76),
            736: ("X", 27.84),
            737: ("X", 25.92),
            738: ("X", 24),
            739: ("X", 35.52),
            740: ("X", 37.44),
            741: ("X", 31.68),
            742: ("X", 33.6),
            743: ("X", 39.36),
            745: ("X", 41.28),
            746: ("X", 43.2),
            747: ("X", 45.12),
            748: ("X", 47.04),
            749: ("X", 48.96),
            750: ("X", 50.88),
            751: ("X", 52.8),
            752: ("X", 58.56),
            753: ("X", 60.48),
            754: ("X", 54.72),
            755: ("X", 56.64),
            756: ("X", 66.24),
            757: ("X", 68.16),
            758: ("X", 62.4),
            759: ("X", 64.32),
            760: ("X", 70.08),
            761: ("X", 72),
            762: ("X", 73.92),
            763: ("X", 75.84),
            764: ("X", 77.76),
            765: ("X", 79.68),
            766: ("X", 81.6),
            768: ("X", 83.52),
            769: ("X", 89.28),
            770: ("X", 91.2),
            771: ("X", 85.44),
            772: ("X", 87.36),
            773: ("X", 98.88),
            774: ("X", 96.96),
            775: ("X", 95.04),
            776: ("X", 93.12),
            777: ("X", 102.72),
            779: ("X", 100.8),
            780: ("X", 106.56),
            781: ("X", 104.64),
            782: ("X", 110.4),
            783: ("X", 108.48),
            784: ("X", 114.24),
            785: ("X", 112.32),
            786: ("X", 121.92),
            787: ("X", 120),
            788: ("X", 118.08),
            789: ("X", 116.16),
            794: ("X", -116.16),
            795: ("X", -118.08),
            796: ("X", -120),
            797: ("X", -121.92),
            798: ("X", -112.32),
            799: ("X", -114.24),
            800: ("X", -108.48),
            801: ("X", -110.4),
            802: ("X", -104.64),
            803: ("X", -106.56),
            804: ("X", -100.8),
            806: ("X", -102.72),
            807: ("X", -93.12),
            808: ("X", -95.04),
            809: ("X", -96.96),
            810: ("X", -98.88),
            811: ("X", -87.36),
            812: ("X", -85.44),
            813: ("X", -91.2),
            814: ("X", -89.28),
            815: ("X", -83.52),
            817: ("X", -81.6),
            818: ("X", -79.68),
            819: ("X", -77.76),
            820: ("X", -75.84),
            821: ("X", -73.92),
            822: ("X", -72),
            823: ("X", -70.08),
            824: ("X", -64.32),
            825: ("X", -62.4),
            826: ("X", -68.16),
            827: ("X", -66.24),
            828: ("X", -56.64),
            829: ("X", -54.72),
            830: ("X", -60.48),
            831: ("X", -58.56),
            832: ("X", -52.8),
            833: ("X", -50.88),
            834: ("X", -48.96),
            835: ("X", -47.04),
            836: ("X", -45.12),
            837: ("X", -43.2),
            838: ("X", -41.28),
            840: ("X", -39.36),
            841: ("X", -33.6),
            842: ("X", -31.68),
            843: ("X", -37.44),
            844: ("X", -35.52),
            845: ("X", -24),
            846: ("X", -25.92),
            847: ("X", -27.84),
            848: ("X", -29.76),
            849: ("X", -20.16),
            851: ("X", -22.08),
            852: ("X", -16.32),
            853: ("X", -18.24),
            854: ("X", -12.48),
            855: ("X", -14.4),
            856: ("X", -8.64),
            857: ("X", -10.56),
            858: ("X", -0.96),
            859: ("X", -2.88),
            860: ("X", -4.8),
            861: ("X", -6.72),
            866: ("Y", -7.44),
            867: ("Y", -5.52),
            868: ("Y", -3.6),
            869: ("Y", -1.68),
            870: ("Y", -11.28),
            871: ("Y", -9.36),
            872: ("Y", -15.12),
            873: ("Y", -13.2),
            874: ("Y", -18.96),
            875: ("Y", -17.04),
            876: ("Y", -22.8),
            878: ("Y", -20.88),
            879: ("Y", -30.48),
            880: ("Y", -28.56),
            881: ("Y", -26.64),
            882: ("Y", -24.72),
            883: ("Y", -36.24),
            884: ("Y", -38.16),
            885: ("Y", -32.4),
            886: ("Y", -34.32),
            887: ("Y", -40.08),
            889: ("Y", -42),
            890: ("Y", -43.92),
            891: ("Y", -45.84),
            892: ("Y", -47.76),
            893: ("Y", -49.68),
            894: ("Y", -51.6),
            895: ("Y", -53.52),
            896: ("Y", -59.28),
            897: ("Y", -61.2),
            898: ("Y", -55.44),
            899: ("Y", -57.36),
            900: ("Y", -66.96),
            901: ("Y", -68.88),
            902: ("Y", -63.12),
            903: ("Y", -65.04),
            904: ("Y", -70.8),
            905: ("Y", -72.72),
            906: ("Y", -74.64),
            907: ("Y", -76.56),
            908: ("Y", -78.48),
            909: ("Y", -80.4),
            910: ("Y", -82.32),
            912: ("Y", -84.24),
            913: ("Y", -90),
            914: ("Y", -91.92),
            915: ("Y", -86.16),
            916: ("Y", -88.08),
            917: ("Y", -99.6),
            918: ("Y", -97.68),
            919: ("Y", -95.76),
            920: ("Y", -93.84),
            921: ("Y", -103.44),
            923: ("Y", -101.52),
            924: ("Y", -107.28),
            925: ("Y", -105.36),
            926: ("Y", -111.12),
            927: ("Y", -109.2),
            928: ("Y", -114.96),
            929: ("Y", -113.04),
            930: ("Y", -122.52),
            931: ("Y", -120.72),
            932: ("Y", -118.8),
            933: ("Y", -116.88),
            938: ("Y", 115.44),
            939: ("Y", 117.36),
            940: ("Y", 119.28),
            941: ("Y", 121.2),
            942: ("Y", 111.6),
            943: ("Y", 113.52),
            944: ("Y", 107.76),
            945: ("Y", 109.68),
            946: ("Y", 103.92),
            947: ("Y", 105.84),
            948: ("Y", 100.08),
            950: ("Y", 102),
            951: ("Y", 92.4),
            952: ("Y", 94.32),
            953: ("Y", 96.24),
            954: ("Y", 98.16),
            955: ("Y", 86.64),
            956: ("Y", 84.72),
            957: ("Y", 90.48),
            958: ("Y", 88.56),
            959: ("Y", 82.8),
            961: ("Y", 80.88),
            962: ("Y", 78.96),
            963: ("Y", 77.04),
            964: ("Y", 75.12),
            965: ("Y", 73.2),
            966: ("Y", 71.28),
            967: ("Y", 69.36),
            968: ("Y", 63.6),
            969: ("Y", 61.68),
            970: ("Y", 67.44),
            971: ("Y", 65.52),
            972: ("Y", 55.92),
            973: ("Y", 54),
            974: ("Y", 59.76),
            975: ("Y", 57.84),
            976: ("Y", 52.08),
            977: ("Y", 50.16),
            978: ("Y", 48.24),
            979: ("Y", 46.32),
            980: ("Y", 44.4),
            981: ("Y", 42.48),
            982: ("Y", 40.56),
            984: ("Y", 38.64),
            985: ("Y", 32.88),
            986: ("Y", 30.96),
            987: ("Y", 36.72),
            988: ("Y", 34.8),
            989: ("Y", 23.28),
            990: ("Y", 25.2),
            991: ("Y", 27.12),
            992: ("Y", 29.04),
            993: ("Y", 19.44),
            995: ("Y", 21.36),
            996: ("Y", 15.6),
            997: ("Y", 17.52),
            998: ("Y", 11.76),
            999: ("Y", 13.68),
            1000: ("Y", 7.92),
            1001: ("Y", 9.84),
            1002: ("Y", 0.24),
            1003: ("Y", 2.16),
            1004: ("Y", 4.08),
            1005: ("Y", 6),
            1010: ("X", 117.12),
            1011: ("X", 119.04),
            1012: ("X", 120.96),
            1013: ("X", 122.88),
            1014: ("X", 113.28),
            1015: ("X", 115.2),
            1016: ("X", 109.44),
            1017: ("X", 111.36),
            1018: ("X", 105.6),
            1019: ("X", 107.52),
            1020: ("X", 101.76),
            1022: ("X", 103.68),
            1023: ("X", 94.08),
            1024: ("X", 96),
            1025: ("X", 97.92),
            1026: ("X", 99.84),
            1027: ("X", 88.32),
            1028: ("X", 86.4),
            1029: ("X", 92.16),
            1030: ("X", 90.24),
            1031: ("X", 84.48),
            1033: ("X", 82.56),
            1034: ("X", 80.64),
            1035: ("X", 78.72),
            1036: ("X", 76.8),
            1037: ("X", 74.88),
            1038: ("X", 72.96),
            1039: ("X", 71.04),
            1040: ("X", 65.28),
            1041: ("X", 63.36),
            1042: ("X", 69.12),
            1043: ("X", 67.2),
            1044: ("X", 57.6),
            1045: ("X", 55.68),
            1046: ("X", 61.44),
            1047: ("X", 59.52),
            1048: ("X", 53.76),
            1049: ("X", 51.84),
            1050: ("X", 49.92),
            1051: ("X", 48),
            1052: ("X", 46.08),
            1053: ("X", 44.16),
            1054: ("X", 42.24),
            1056: ("X", 40.32),
            1057: ("X", 34.56),
            1058: ("X", 32.64),
            1059: ("X", 38.4),
            1060: ("X", 36.48),
            1061: ("X", 24.96),
            1062: ("X", 26.88),
            1063: ("X", 28.8),
            1064: ("X", 30.72),
            1065: ("X", 21.12),
            1067: ("X", 23.04),
            1068: ("X", 17.28),
            1069: ("X", 19.2),
            1070: ("X", 13.44),
            1071: ("X", 15.36),
            1072: ("X", 9.6),
            1073: ("X", 11.52),
            1074: ("X", 1.92),
            1075: ("X", 3.84),
            1076: ("X", 5.76),
            1077: ("X", 7.68),
            1082: ("X", -5.76),
            1083: ("X", -3.84),
            1084: ("X", -1.92),
            1085: ("X", 0),
            1086: ("X", -9.6),
            1087: ("X", -7.68),
            1088: ("X", -13.44),
            1089: ("X", -11.52),
            1090: ("X", -17.28),
            1091: ("X", -15.36),
            1092: ("X", -21.12),
            1094: ("X", -19.2),
            1095: ("X", -28.8),
            1096: ("X", -26.88),
            1097: ("X", -24.96),
            1098: ("X", -23.04),
            1099: ("X", -34.56),
            1100: ("X", -36.48),
            1101: ("X", -30.72),
            1102: ("X", -32.64),
            1103: ("X", -38.4),
            1105: ("X", -40.32),
            1106: ("X", -42.24),
            1107: ("X", -44.16),
            1108: ("X", -46.08),
            1109: ("X", -48),
            1110: ("X", -49.92),
            1111: ("X", -51.84),
            1112: ("X", -57.6),
            1113: ("X", -59.52),
            1114: ("X", -53.76),
            1115: ("X", -55.68),
            1116: ("X", -65.28),
            1117: ("X", -67.2),
            1118: ("X", -61.44),
            1119: ("X", -63.36),
            1120: ("X", -69.12),
            1121: ("X", -71.04),
            1122: ("X", -72.96),
            1123: ("X", -74.88),
            1124: ("X", -76.8),
            1125: ("X", -78.72),
            1126: ("X", -80.64),
            1128: ("X", -82.56),
            1129: ("X", -88.32),
            1130: ("X", -90.24),
            1131: ("X", -84.48),
            1132: ("X", -86.4),
            1133: ("X", -97.92),
            1134: ("X", -96),
            1135: ("X", -94.08),
            1136: ("X", -92.16),
            1137: ("X", -101.76),
            1139: ("X", -99.84),
            1140: ("X", -105.6),
            1141: ("X", -103.68),
            1142: ("X", -109.44),
            1143: ("X", -107.52),
            1144: ("X", -113.28),
            1145: ("X", -111.36),
            1146: ("X", -120.96),
            1147: ("X", -119.04),
            1148: ("X", -117.12),
            1149: ("X", -115.2),
        }
    },
    "TREX-DM-R": {
        "mapping": {
            2: ("Y", -115.92),
            3: ("Y", -117.84),
            4: ("Y", -119.76),
            6: ("Y", -112.08),
            7: ("Y", -114),
            8: ("Y", -108.24),
            9: ("Y", -110.16),
            10: ("Y", -104.4),
            11: ("Y", -106.32),
            12: ("Y", -100.56),
            14: ("Y", -102.48),
            15: ("Y", -92.88),
            16: ("Y", -121.68),
            17: ("Y", -96.72),
            18: ("Y", -98.64),
            19: ("Y", -87.12),
            20: ("Y", -85.2),
            21: ("Y", -90.96),
            22: ("Y", -89.04),
            23: ("Y", -83.28),
            25: ("Y", -81.36),
            26: ("Y", -79.44),
            27: ("Y", -77.52),
            28: ("Y", -75.6),
            29: ("Y", -73.68),
            30: ("Y", -71.76),
            31: ("Y", -69.84),
            32: ("Y", -64.08),
            33: ("Y", -62.16),
            34: ("Y", -67.92),
            35: ("Y", -66),
            36: ("Y", -56.4),
            37: ("Y", -54.48),
            38: ("Y", -60.24),
            39: ("Y", -58.32),
            40: ("Y", -52.56),
            41: ("Y", -50.64),
            42: ("Y", -48.72),
            43: ("Y", -46.8),
            44: ("Y", -44.88),
            45: ("Y", -42.96),
            46: ("Y", -41.04),
            48: ("Y", -39.12),
            49: ("Y", -33.36),
            50: ("Y", -31.44),
            51: ("Y", -37.2),
            52: ("Y", -35.28),
            53: ("Y", -23.76),
            54: ("Y", -25.68),
            55: ("Y", -27.6),
            56: ("Y", -29.52),
            57: ("Y", -19.92),
            59: ("Y", -21.84),
            60: ("Y", -16.08),
            61: ("Y", -18),
            62: ("Y", -12.24),
            63: ("Y", -14.16),
            64: ("Y", -8.4),
            65: ("Y", -10.32),
            66: ("Y", -0.72),
            67: ("Y", -2.64),
            68: ("Y", -4.56),
            69: ("Y", -6.48),
            74: ("Y", 6.96),
            75: ("Y", 5.04),
            76: ("Y", 3.12),
            77: ("Y", 1.2),
            78: ("Y", 10.8),
            79: ("Y", 8.88),
            80: ("Y", 14.64),
            81: ("Y", 12.72),
            82: ("Y", 18.48),
            83: ("Y", 16.56),
            84: ("Y", 22.32),
            86: ("Y", 20.4),
            87: ("Y", 30),
            88: ("Y", 28.08),
            89: ("Y", 26.16),
            90: ("Y", 24.24),
            91: ("Y", 35.76),
            92: ("Y", 37.68),
            93: ("Y", 31.92),
            94: ("Y", 33.84),
            95: ("Y", 39.6),
            97: ("Y", 41.52),
            98: ("Y", 43.44),
            99: ("Y", 45.36),
            100: ("Y", 47.28),
            101: ("Y", 49.2),
            102: ("Y", 51.12),
            103: ("Y", 53.04),
            104: ("Y", 58.8),
            105: ("Y", 60.72),
            106: ("Y", 54.96),
            107: ("Y", 56.88),
            108: ("Y", 66.48),
            109: ("Y", 68.4),
            110: ("Y", 62.64),
            111: ("Y", 64.56),
            112: ("Y", 70.32),
            113: ("Y", 72.24),
            114: ("Y", 74.16),
            115: ("Y", 76.08),
            116: ("Y", 78),
            117: ("Y", 79.92),
            118: ("Y", 81.84),
            120: ("Y", 83.76),
            121: ("Y", 89.52),
            122: ("Y", 91.44),
            123: ("Y", 85.68),
            124: ("Y", 87.6),
            125: ("Y", 99.12),
            126: ("Y", 97.2),
            127: ("Y", 95.28),
            128: ("Y", 93.36),
            129: ("Y", 102.96),
            131: ("Y", 101.04),
            132: ("Y", 106.8),
            133: ("Y", 104.88),
            134: ("Y", 110.64),
            135: ("Y", 108.72),
            136: ("Y", 114.48),
            137: ("Y", 112.56),
            138: ("Y", 122.76),
            139: ("Y", 120.24),
            140: ("Y", 118.32),
            141: ("Y", 116.4),
            146: ("X", 6.72),
            147: ("X", 4.8),
            148: ("X", 2.88),
            149: ("X", 0.96),
            150: ("X", 10.56),
            151: ("X", 8.64),
            152: ("X", 14.4),
            153: ("X", 12.48),
            154: ("X", 18.24),
            155: ("X", 16.32),
            156: ("X", 22.08),
            158: ("X", 20.16),
            159: ("X", 29.76),
            160: ("X", 27.84),
            161: ("X", 25.92),
            162: ("X", 24),
            163: ("X", 35.52),
            164: ("X", 37.44),
            165: ("X", 31.68),
            166: ("X", 33.6),
            167: ("X", 39.36),
            169: ("X", 41.28),
            170: ("X", 43.2),
            171: ("X", 45.12),
            172: ("X", 47.04),
            173: ("X", 48.96),
            174: ("X", 50.88),
            175: ("X", 52.8),
            176: ("X", 58.56),
            177: ("X", 60.48),
            178: ("X", 54.72),
            179: ("X", 56.64),
            180: ("X", 66.24),
            181: ("X", 68.16),
            182: ("X", 62.4),
            183: ("X", 64.32),
            184: ("X", 70.08),
            185: ("X", 72),
            186: ("X", 73.92),
            187: ("X", 75.84),
            188: ("X", 77.76),
            189: ("X", 79.68),
            190: ("X", 81.6),
            192: ("X", 83.52),
            193: ("X", 89.28),
            194: ("X", 91.2),
            195: ("X", 85.44),
            196: ("X", 87.36),
            197: ("X", 98.88),
            198: ("X", 96.96),
            199: ("X", 95.04),
            200: ("X", 93.12),
            201: ("X", 102.72),
            203: ("X", 100.8),
            204: ("X", 106.56),
            205: ("X", 104.64),
            206: ("X", 110.4),
            207: ("X", 108.48),
            208: ("X", 114.24),
            209: ("X", 112.32),
            210: ("X", 121.92),
            211: ("X", 120),
            212: ("X", 118.08),
            213: ("X", 116.16),
            218: ("X", -116.16),
            219: ("X", -118.08),
            220: ("X", -120),
            221: ("X", -121.92),
            222: ("X", -112.32),
            223: ("X", -114.24),
            224: ("X", -108.48),
            225: ("X", -110.4),
            226: ("X", -104.64),
            227: ("X", -106.56),
            228: ("X", -100.8),
            230: ("X", -102.72),
            231: ("X", -93.12),
            232: ("X", -95.04),
            233: ("X", -96.96),
            234: ("X", -98.88),
            235: ("X", -87.36),
            236: ("X", -85.44),
            237: ("X", -91.2),
            238: ("X", -89.28),
            239: ("X", -83.52),
            241: ("X", -81.6),
            242: ("X", -79.68),
            243: ("X", -77.76),
            244: ("X", -75.84),
            245: ("X", -73.92),
            246: ("X", -72),
            247: ("X", -70.08),
            248: ("X", -64.32),
            249: ("X", -62.4),
            250: ("X", -68.16),
            251: ("X", -66.24),
            252: ("X", -56.64),
            253: ("X", -54.72),
            254: ("X", -60.48),
            255: ("X", -58.56),
            256: ("X", -52.8),
            257: ("X", -50.88),
            258: ("X", -48.96),
            259: ("X", -47.04),
            260: ("X", -45.12),
            261: ("X", -43.2),
            262: ("X", -41.28),
            264: ("X", -39.36),
            265: ("X", -33.6),
            266: ("X", -31.68),
            267: ("X", -37.44),
            268: ("X", -35.52),
            269: ("X", -24),
            270: ("X", -25.92),
            271: ("X", -27.84),
            272: ("X", -29.76),
            273: ("X", -20.16),
            275: ("X", -22.08),
            276: ("X", -16.32),
            277: ("X", -18.24),
            278: ("X", -12.48),
            279: ("X", -14.4),
            280: ("X", -8.64),
            281: ("X", -10.56),
            282: ("X", -0.96),
            283: ("X", -2.88),
            284: ("X", -4.8),
            285: ("X", -6.72),
            290: ("Y", -7.44),
            291: ("Y", -5.52),
            292: ("Y", -3.6),
            293: ("Y", -1.68),
            294: ("Y", -11.28),
            295: ("Y", -9.36),
            296: ("Y", -15.12),
            297: ("Y", -13.2),
            298: ("Y", -18.96),
            299: ("Y", -17.04),
            300: ("Y", -22.8),
            302: ("Y", -20.88),
            303: ("Y", -30.48),
            304: ("Y", -28.56),
            305: ("Y", -26.64),
            306: ("Y", -24.72),
            307: ("Y", -36.24),
            308: ("Y", -38.16),
            309: ("Y", -32.4),
            310: ("Y", -34.32),
            311: ("Y", -40.08),
            313: ("Y", -42),
            314: ("Y", -43.92),
            315: ("Y", -45.84),
            316: ("Y", -47.76),
            317: ("Y", -49.68),
            318: ("Y", -51.6),
            319: ("Y", -53.52),
            320: ("Y", -59.28),
            321: ("Y", -61.2),
            322: ("Y", -55.44),
            323: ("Y", -57.36),
            324: ("Y", -66.96),
            325: ("Y", -68.88),
            326: ("Y", -63.12),
            327: ("Y", -65.04),
            328: ("Y", -70.8),
            329: ("Y", -72.72),
            330: ("Y", -74.64),
            331: ("Y", -76.56),
            332: ("Y", -78.48),
            333: ("Y", -80.4),
            334: ("Y", -82.32),
            336: ("Y", -84.24),
            337: ("Y", -90),
            338: ("Y", -91.92),
            339: ("Y", -86.16),
            340: ("Y", -88.08),
            341: ("Y", -99.6),
            342: ("Y", -97.68),
            343: ("Y", -95.76),
            344: ("Y", -93.84),
            345: ("Y", -103.44),
            347: ("Y", -101.52),
            348: ("Y", -107.28),
            349: ("Y", -105.36),
            350: ("Y", -111.12),
            351: ("Y", -109.2),
            352: ("Y", -114.96),
            353: ("Y", -113.04),
            354: ("Y", -122.52),
            355: ("Y", -120.72),
            356: ("Y", -118.8),
            357: ("Y", -116.88),
            362: ("Y", 115.44),
            363: ("Y", 117.36),
            364: ("Y", 119.28),
            365: ("Y", 121.2),
            366: ("Y", 111.6),
            367: ("Y", 113.52),
            368: ("Y", 107.76),
            369: ("Y", 109.68),
            370: ("Y", 103.92),
            371: ("Y", 105.84),
            372: ("Y", 100.08),
            374: ("Y", 102),
            375: ("Y", 92.4),
            376: ("Y", 94.32),
            377: ("Y", 96.24),
            378: ("Y", 98.16),
            379: ("Y", 86.64),
            380: ("Y", 84.72),
            381: ("Y", 90.48),
            382: ("Y", 88.56),
            383: ("Y", 82.8),
            385: ("Y", 80.88),
            386: ("Y", 78.96),
            387: ("Y", 77.04),
            388: ("Y", 75.12),
            389: ("Y", 73.2),
            390: ("Y", 71.28),
            391: ("Y", 69.36),
            392: ("Y", 63.6),
            393: ("Y", 61.68),
            394: ("Y", 67.44),
            395: ("Y", 65.52),
            396: ("Y", 55.92),
            397: ("Y", 54),
            398: ("Y", 59.76),
            399: ("Y", 57.84),
            400: ("Y", 52.08),
            401: ("Y", 50.16),
            402: ("Y", 48.24),
            403: ("Y", 46.32),
            404: ("Y", 44.4),
            405: ("Y", 42.48),
            406: ("Y", 40.56),
            408: ("Y", 38.64),
            409: ("Y", 32.88),
            410: ("Y", 30.96),
            411: ("Y", 36.72),
            412: ("Y", 34.8),
            413: ("Y", 23.28),
            414: ("Y", 25.2),
            415: ("Y", 27.12),
            416: ("Y", 29.04),
            417: ("Y", 19.44),
            419: ("Y", 21.36),
            420: ("Y", 15.6),
            421: ("Y", 17.52),
            422: ("Y", 11.76),
            423: ("Y", 13.68),
            424: ("Y", 7.92),
            425: ("Y", 9.84),
            426: ("Y", 0.24),
            427: ("Y", 2.16),
            428: ("Y", 4.08),
            429: ("Y", 6),
            434: ("X", 117.12),
            435: ("X", 119.04),
            436: ("X", 120.96),
            437: ("X", 122.88),
            438: ("X", 113.28),
            439: ("X", 115.2),
            440: ("X", 109.44),
            441: ("X", 111.36),
            442: ("X", 105.6),
            443: ("X", 107.52),
            444: ("X", 101.76),
            446: ("X", 103.68),
            447: ("X", 94.08),
            448: ("X", 96),
            449: ("X", 97.92),
            450: ("X", 99.84),
            451: ("X", 88.32),
            452: ("X", 86.4),
            453: ("X", 92.16),
            454: ("X", 90.24),
            455: ("X", 84.48),
            457: ("X", 82.56),
            458: ("X", 80.64),
            459: ("X", 78.72),
            460: ("X", 76.8),
            461: ("X", 74.88),
            462: ("X", 72.96),
            463: ("X", 71.04),
            464: ("X", 65.28),
            465: ("X", 63.36),
            466: ("X", 69.12),
            467: ("X", 67.2),
            468: ("X", 57.6),
            469: ("X", 55.68),
            470: ("X", 61.44),
            471: ("X", 59.52),
            472: ("X", 53.76),
            473: ("X", 51.84),
            474: ("X", 49.92),
            475: ("X", 48),
            476: ("X", 46.08),
            477: ("X", 44.16),
            478: ("X", 42.24),
            480: ("X", 40.32),
            481: ("X", 34.56),
            482: ("X", 32.64),
            483: ("X", 38.4),
            484: ("X", 36.48),
            485: ("X", 24.96),
            486: ("X", 26.88),
            487: ("X", 28.8),
            488: ("X", 30.72),
            489: ("X", 21.12),
            491: ("X", 23.04),
            492: ("X", 17.28),
            493: ("X", 19.2),
            494: ("X", 13.44),
            495: ("X", 15.36),
            496: ("X", 9.6),
            497: ("X", 11.52),
            498: ("X", 1.92),
            499: ("X", 3.84),
            500: ("X", 5.76),
            501: ("X", 7.68),
            506: ("X", -5.76),
            507: ("X", -3.84),
            508: ("X", -1.92),
            509: ("X", 0),
            510: ("X", -9.6),
            511: ("X", -7.68),
            512: ("X", -13.44),
            513: ("X", -11.52),
            514: ("X", -17.28),
            515: ("X", -15.36),
            516: ("X", -21.12),
            518: ("X", -19.2),
            519: ("X", -28.8),
            520: ("X", -26.88),
            521: ("X", -24.96),
            522: ("X", -23.04),
            523: ("X", -34.56),
            524: ("X", -36.48),
            525: ("X", -30.72),
            526: ("X", -32.64),
            527: ("X", -38.4),
            529: ("X", -40.32),
            530: ("X", -42.24),
            531: ("X", -44.16),
            532: ("X", -46.08),
            533: ("X", -48),
            534: ("X", -49.92),
            535: ("X", -51.84),
            536: ("X", -57.6),
            537: ("X", -59.52),
            538: ("X", -53.76),
            539: ("X", -55.68),
            540: ("X", -65.28),
            541: ("X", -67.2),
            542: ("X", -61.44),
            543: ("X", -63.36),
            544: ("X", -69.12),
            545: ("X", -71.04),
            546: ("X", -72.96),
            547: ("X", -74.88),
            548: ("X", -76.8),
            549: ("X", -78.72),
            550: ("X", -80.64),
            552: ("X", -82.56),
            553: ("X", -88.32),
            554: ("X", -90.24),
            555: ("X", -84.48),
            556: ("X", -86.4),
            557: ("X", -97.92),
            558: ("X", -96),
            559: ("X", -94.08),
            560: ("X", -92.16),
            561: ("X", -101.76),
            563: ("X", -99.84),
            564: ("X", -105.6),
            565: ("X", -103.68),
            566: ("X", -109.44),
            567: ("X", -107.52),
            568: ("X", -113.28),
            569: ("X", -111.36),
            570: ("X", -120.96),
            571: ("X", -119.04),
            572: ("X", -117.12),
            573: ("X", -115.2),
        }
    },
    # "ALPHA-CAMM": {"mapping": {}},
}

for readout_name in readouts:
    mapping = readouts[readout_name]["mapping"]

    y_min = np.min(
        [position for signal_type, position in mapping.values() if signal_type == "Y"]
    )
    y_max = np.max(
        [position for signal_type, position in mapping.values() if signal_type == "Y"]
    )
    x_min = np.min(
        [position for signal_type, position in mapping.values() if signal_type == "X"]
    )
    x_max = np.max(
        [position for signal_type, position in mapping.values() if signal_type == "X"]
    )

    readouts[readout_name]["limits"] = {}
    readouts[readout_name]["limits"]["x"] = (x_min, x_max)
    readouts[readout_name]["limits"]["y"] = (y_min, y_max)


def amplitude_to_color(
    amplitude, min_amplitude=0, max_amplitude=4095, cmap_name="jet", log_scale=True
):
    amplitude = max(amplitude, min_amplitude)

    cmap = plt.get_cmap(cmap_name)

    if log_scale:
        min_amplitude = 1
        amplitude = max(amplitude, min_amplitude)
        log_amplitude = np.log10(amplitude)
        log_min = np.log10(min_amplitude)
        log_max = np.log10(max_amplitude)
        normalized_amplitude = (log_amplitude - log_min) / (log_max - log_min)
    else:
        # Linear scaling
        normalized_amplitude = (amplitude - min_amplitude) / (
            max_amplitude - min_amplitude
        )

    # Normalize the value to be between 0 and 1
    normalized_amplitude = np.clip(normalized_amplitude, 0, 1)

    # Convert normalized amplitude to a color using the colormap
    return cmap(normalized_amplitude)


def get_filename_from_prometheus_metrics() -> str | None:
    url = "http://localhost:8080/metrics"
    # try to get it with a timeout of 1 second
    try:
        response = requests.get(url, timeout=1)
        text = response.text
        match = re.search(r'output_root_file_size_mb{filename="([^"]+)"}', text)
        if match:
            return match.group(1)
        else:
            return None

    except requests.exceptions.RequestException:
        return None


def get_event(tree: uproot.TTree, entry: int):
    if entry >= tree.num_entries:
        raise ValueError(
            f"Entry {entry} is out of bounds. Tree has {tree.num_entries} entries."
        )

    events = tree.arrays(entry_start=entry, entry_stop=entry + 1)
    events["signal_values"] = ak.unflatten(events["signal_values"], 512, axis=1)

    signals = ak.Array(
        {"id": events["signal_ids"], "values": events["signal_values"]},
        with_name="Signals",
    )
    events["signals"] = signals

    events = ak.without_field(events, "signal_ids")
    events = ak.without_field(events, "signal_values")

    event = events[0]
    return event


@njit
def compute_energy_estimate(
    event: ak.highlevel.Record,
    signal_ids_allowed: set[int],
    baseline_range: float = 0.2,
) -> float:
    energy = 0.0
    baseline_factor = int(baseline_range * len(event.signals.values[0]))

    for i in range(len(event.signals.id)):
        signal_id = int(event.signals.id[i])

        if signal_id not in signal_ids_allowed:
            continue

        values = np.asarray(event.signals.values[i])

        energy += np.max(values) - np.mean(values[:baseline_factor])

    return energy


@njit
def compute_energy_of_waveform(
    waveform: np.ndarray, baseline_range: float = 0.2
) -> float:
    baseline_factor = int(baseline_range * len(waveform))
    return np.max(waveform) - np.mean(waveform[:baseline_factor])


class EventViewer:
    def __init__(self, _root):
        self.file = None
        self.event_tree = None
        self.current_entry = 0

        self.root = _root
        self.root.title("Event Viewer")

        self.label = tk.Label(self.root, text="Select a ROOT file to plot signals from")
        self.label.pack(padx=20, pady=5)

        self.top_menu = tk.Frame(self.root, bd=2, relief=tk.FLAT)
        self.top_menu.pack(pady=5, side=tk.TOP)

        self.open_button = tk.Button(
            self.top_menu, text="Open Remote File", command=self.open_remote_file
        )
        self.open_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.open_button = tk.Button(
            self.top_menu, text="Open Local File", command=self.open_local_file
        )
        self.open_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.reload_file_button = tk.Button(
            self.top_menu, text="Reload", command=self.on_reload
        )
        self.reload_file_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.reload_file_button = tk.Button(
            self.top_menu, text="Attach", command=self.attach
        )
        self.reload_file_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.observables_compute = tk.BooleanVar()
        self.observables_compute.set(False)

        self.display_menu_options = [
            "Event Waveforms",
            "Event Position vs Time",
            "Readout Energy / Position",
            "Readout Activity X/Y",
            "Channel Activity",
        ]
        self.display_menu_selected = tk.StringVar()
        self.display_menu = tk.OptionMenu(
            self.top_menu,
            self.display_menu_selected,
            *self.display_menu_options,
            command=self.on_display_menu,
        )
        self.display_menu.pack(side=tk.LEFT, padx=20, pady=5)
        self.display_menu_selected.set(self.display_menu_options[0])

        self.readout_options = list(readouts.keys())
        self.selected_readout = tk.StringVar()

        self.readout_menu = tk.OptionMenu(
            self.top_menu,
            self.selected_readout,
            *self.readout_options,
            command=self.on_readout_select,
        )
        self.readout_menu.pack(side=tk.LEFT, padx=20, pady=5)
        self.selected_readout.set("IAXO-D1")
        assert self.selected_readout.get() in readouts, (
            f"Invalid readout {self.selected_readout.get()}. Available readouts are {readouts.keys()}"
        )
        self.readout_signal_ids = set(readouts[self.readout]["mapping"].keys())

        self.auto_update_variable = tk.BooleanVar()
        self.auto_update_button = tk.Checkbutton(
            self.top_menu,
            text="Auto-Update",
            variable=self.auto_update_variable,
            command=self.on_auto_update,
        )
        self.auto_update_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.event_frame = tk.Frame(self.root, bd=2, relief=tk.FLAT)
        self.event_frame.pack(pady=5, side=tk.TOP)

        self.first_event_button = tk.Button(
            self.event_frame, text="First Event", command=self.first_event
        )
        self.first_event_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.previous_event_button = tk.Button(
            self.event_frame, text="Previous Event", command=self.prev_event
        )
        self.previous_event_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.entry_textbox = tk.Entry(self.event_frame, width=10)
        self.entry_textbox.pack(side=tk.LEFT, padx=20, pady=5)
        self.entry_textbox.insert(0, "0")

        self.next_event_button = tk.Button(
            self.event_frame, text="Next Event", command=self.next_event
        )
        self.next_event_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.last_event_button = tk.Button(
            self.event_frame, text="Last Event", command=self.last_event
        )
        self.last_event_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.random_event_button = tk.Button(
            self.event_frame, text="Random Event", command=self.random_event
        )
        self.random_event_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.show_all_waveforms_variable = tk.BooleanVar()
        self.show_all_waveforms_button = tk.Checkbutton(
            self.event_frame,
            text="Waveforms Outside Readout",
            variable=self.show_all_waveforms_variable,
            command=self.on_show_all_waveforms,
        )
        self.show_all_waveforms_button.pack(side=tk.LEFT, padx=20, pady=5)

        self.graph_frame = tk.Frame(self.root)
        self.graph_frame.pack(fill="both", expand=True)

        # bindings
        self.root.bind("<Left>", lambda _: self.prev_event())
        self.root.bind("<Right>", lambda _: self.next_event())
        self.root.bind("r", lambda _: self.load_file())
        self.root.bind("a", lambda _: self.attach())
        self.root.bind("o", lambda _: self.open_local_file())
        self.entry_textbox.bind("<Return>", lambda _: self.plot_graph())

        # Initialize the plot area
        self.figure = plt.Figure()
        self.figure.tight_layout()

        self.ax_left = None
        self.ax_right = None

        self.canvas = FigureCanvasTkAgg(self.figure, self.graph_frame)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        self.canvas.draw()

        self.label_canvas = tk.Canvas(
            root, width=200, height=20, bg="white", highlightthickness=0
        )
        self.label_canvas.place_forget()

        self.event_cache = LimitedOrderedDict(100)  # Cache the last 100 events
        self.observable_entries_processed = set()
        self.observable_energy_estimate = np.array([])
        self.observable_channel_activity = defaultdict(int)
        self.observable_hit_map_position_x = np.array([])
        self.observable_hit_map_position_y = np.array([])

        def rgb_to_hex(rgb):
            """Convert an RGB tuple to a hex color string."""
            return "#{:02x}{:02x}{:02x}".format(
                int(rgb[0] * 255), int(rgb[1] * 255), int(rgb[2] * 255)
            )

        def on_motion(event):
            if self.display_menu_selected.get() != self.display_menu_options[0]:
                return

            # Check if the mouse is over any line
            visible = False
            if self.ax_left is None:
                return

            for line in self.ax_left.lines:
                if line.contains(event)[0]:
                    x, y = event.x, event.y
                    adjusted_y = self.canvas.get_tk_widget().winfo_height() - y
                    line_color = line.get_color()
                    self.label_canvas.delete("all")
                    self.label_canvas.create_rectangle(
                        2, 2, 18, 18, fill=rgb_to_hex(line_color), outline="black"
                    )
                    signal_id = int(line.get_label())
                    additional_text = ""
                    if signal_id in readouts[self.readout]["mapping"]:
                        signal_type, position = readouts[self.readout]["mapping"][
                            signal_id
                        ]
                        additional_text = f" @ {signal_type} = {position} mm"
                    self.label_canvas.create_text(
                        30,
                        10,
                        anchor="w",
                        text=f"ID {line.get_label()}{additional_text}",
                        fill="black",
                    )
                    self.label_canvas.place(x=x, y=adjusted_y)
                    visible = True
                    break
            if not visible:
                self.label_canvas.place_forget()

        self.canvas.mpl_connect("motion_notify_event", on_motion)

        self.filepath = None

        self.thread_observables = None
        self.thread_auto_update = None

        self.start_observables_compute()

    @property
    def readout(self):
        return self.selected_readout.get()

    def on_readout_select(self, _):
        self.readout_signal_ids = set(readouts[self.readout]["mapping"].keys())
        self.reset_event_and_observable_data()

        if self.check_file(silent=True):
            self.load_file()
            self.plot_graph()

    def on_reload(self):
        self.load_file()
        self.plot_graph()

    def on_show_all_waveforms(self):
        self.load_file()
        self.plot_graph()

    def start_observables_compute(self):
        if self.thread_observables is None:

            def worker():
                while True:
                    if not self.check_file(silent=True):
                        time.sleep(1)
                        continue

                    for i in range(0, self.event_tree.num_entries):
                        while not self.observables_compute.get():
                            time.sleep(0.1)

                        if not self.check_file(silent=True):
                            time.sleep(1)
                            continue

                        if i >= self.event_tree.num_entries:
                            # Event tree has been reloaded
                            break

                        if i in self.observable_entries_processed:
                            continue

                        self.get_event_and_process(i)
                        time.sleep(0.1)

            self.thread_observables = threading.Thread(target=worker)
            self.thread_observables.daemon = True
            self.thread_observables.start()

        if self.check_file(silent=True):
            self.plot_graph()

    def on_display_menu(self, _):
        selected = self.display_menu_selected.get()
        if selected == self.display_menu_options[0]:
            # Waveforms
            self.observables_compute.set(False)
        elif selected == self.display_menu_options[1]:
            # Event Time
            self.observables_compute.set(False)
        elif selected == self.display_menu_options[2]:
            # Readout Observables
            self.observables_compute.set(True)
        elif selected == self.display_menu_options[3]:
            # Readout Activity X/Y
            self.observables_compute.set(True)
        elif selected == self.display_menu_options[4]:
            # Channel Activity
            self.observables_compute.set(True)

        if self.check_file(silent=True):
            self.plot_graph()

    def on_auto_update(self):
        if self.thread_auto_update is None and self.auto_update_variable.get():

            def worker():
                while True:
                    while not self.auto_update_variable.get():
                        time.sleep(0.1)

                    if self.check_file(silent=True):
                        self.load_file()
                        self.update_entry(self.event_tree.num_entries - 1)
                        self.plot_graph()

                    time.sleep(1)

            self.thread_auto_update = threading.Thread(target=worker)
            self.thread_auto_update.daemon = True
            self.thread_auto_update.start()

    def reset_event_and_observable_data(self):
        with lock:
            self.event_cache = LimitedOrderedDict(100)  # Cache the last 100 events
            self.observable_entries_processed = set()
            self.observable_energy_estimate = np.array([])
            self.observable_channel_activity = defaultdict(int)

    def attach(self):
        filename = get_filename_from_prometheus_metrics()

        if filename is None:
            messagebox.showerror("Error", "No filename found to attach")
            return

        if filename != self.filepath:
            self.reset_event_and_observable_data()
            self.filepath = filename

        self.load_file()
        self.plot_graph()

        self.auto_update_button.select()
        # just selecting the button does not trigger the command!
        self.on_auto_update()

    def load_file(self):
        if self.filepath is None:
            messagebox.showwarning("No File", "You must select a file first")
            return

        self.file = uproot.open(self.filepath)

        try:
            self.event_tree = self.file["events"]
        except KeyError:
            self.update_entry(0)

            messagebox.showerror(
                "Error",
                f"File {self.filepath} does not contain the 'events' tree. file keys are {self.file.keys()}",
            )
            self.filepath = None
            return

        filename_text = self.filepath
        max_file_length = 100
        if len(filename_text) > max_file_length:
            filename_text = filename_text.split("/")[-1]
        if len(filename_text) > max_file_length:
            filename_text = filename_text[:max_file_length] + "..."

        self.label.config(
            text=f"{filename_text} - {self.event_tree.num_entries} entries"
        )

        if self.current_entry >= self.event_tree.num_entries:
            self.update_entry(0)

    def open_local_file(self, filename: str | None = None):
        if filename is None:
            self.filepath = filedialog.askopenfilename(
                filetypes=[("ROOT files", "*.root")]
            )
            if not self.filepath:
                return
        else:
            self.filepath = filename

        self.update_entry(0)
        self.reset_event_and_observable_data()
        self.load_file()
        self.plot_graph()

    def open_remote_file(self):
        # ask the user for the filename
        filename = simpledialog.askstring(
            "Remote File",
            "Please enter file URI in a format supported by uproot such as 'http://localhost:8080/file.root' or 'ssh://user@host:port/home/user/file.root'",
        )
        # check it is a valid filename if uproot can open it
        try:
            uproot.open(filename)
        except Exception:
            messagebox.showerror(
                "Error",
                f"uproot couldn't open the file '{filename}'. The file may not exist or you may not have the necessary permissions.",
            )
            return

        self.filepath = filename

        self.update_entry(0)
        self.reset_event_and_observable_data()
        self.load_file()
        self.plot_graph()

    def check_file(self, silent: bool = False) -> bool:
        if self.filepath is None or self.event_tree is None:
            if not silent:
                messagebox.showwarning("No File", "Please select a file first!")
            return False
        return True

    def get_event_and_process(self, entry: int):
        with lock:
            if entry not in self.event_cache:
                event = get_event(self.event_tree, entry)
                self.event_cache[entry] = event

            event = self.event_cache[entry]

            if entry not in self.observable_entries_processed:
                for signal_id in event.signals.id:
                    self.observable_channel_activity[int(signal_id)] += 1

                total_energy = 0
                position_average_x = 0
                position_average_y = 0
                for signal_id, values in zip(event.signals.id, event.signals.values):
                    signal_id = int(signal_id)
                    if signal_id not in self.readout_signal_ids:
                        continue
                    energy = compute_energy_of_waveform(np.array(values))
                    total_energy += energy
                    channel_type = readouts[self.readout]["mapping"][signal_id][0]
                    channel_position = readouts[self.readout]["mapping"][signal_id][1]
                    if channel_type == "X":
                        position_average_x += energy * channel_position
                    else:
                        position_average_y += energy * channel_position

                self.observable_energy_estimate = np.append(
                    self.observable_energy_estimate, total_energy
                )

                if total_energy > 0:
                    # Energy in readout observable can be 0 but position average cannot be computed in that case

                    position_average_x /= total_energy
                    position_average_y /= total_energy

                    self.observable_hit_map_position_x = np.append(
                        self.observable_hit_map_position_x, position_average_x
                    )
                    self.observable_hit_map_position_y = np.append(
                        self.observable_hit_map_position_y, position_average_y
                    )

                self.observable_entries_processed.add(entry)

            return event

    def clear_plots(self):
        if self.ax_left is None:
            self.ax_left = self.figure.add_subplot(121)

        self.ax_left.clear()
        self.ax_left.set_aspect("auto")

        if self.ax_right is None:
            self.ax_right = self.figure.add_subplot(122)

        self.ax_right.clear()
        self.ax_right.set_aspect("auto")

    def plot_waveforms(self):
        entry = int(self.entry_textbox.get())
        self.current_entry = entry

        event = self.get_event_and_process(entry)

        self.clear_plots()

        for signal_id, values in zip(event.signals.id, event.signals.values):
            if int(signal_id) not in self.readout_signal_ids:
                continue

            self.ax_left.plot(values, label=f"{signal_id}", alpha=0.8, linewidth=2.5)

        # plot signals outside of readout after plotting the signals inside the readout, this way we maintain the colors
        if self.show_all_waveforms_variable.get():
            for signal_id, values in zip(event.signals.id, event.signals.values):
                if int(signal_id) in self.readout_signal_ids:
                    continue

                self.ax_left.plot(
                    values, label=f"{signal_id}", alpha=0.8, linewidth=2.5
                )

        n_signals_showing = len(self.ax_left.lines)

        extra_title = (
            f" / Readout {n_signals_showing}"
            if n_signals_showing != len(event.signals.id)
            else ""
        )
        self.figure.suptitle(
            f"Event {entry} - Number of Signals: Total {len(event.signals.id)}{extra_title}"
        )

        self.ax_left.set_ylim(0, 4096)
        self.ax_left.set_yticks(range(0, 4096 + 1, 512))
        self.ax_left.set_yticks(range(0, 4096 + 1, 128), minor=True)

        self.ax_left.set_xlabel("Time bins")
        self.ax_left.set_ylabel("ADC")

        self.ax_left.set_xlim(0, 512)
        self.ax_left.set_xticks(range(0, 512 + 1, 64))
        self.ax_left.set_xticks(range(0, 512 + 1, 16), minor=True)

        if 0 < n_signals_showing <= 10:
            self.ax_left.legend(loc="upper right")

        # get min value of all signals
        min_value = np.min([np.min(values) for values in event.signals.values])

        line_width = 4
        for signal_id, values in zip(event.signals.id, event.signals.values):
            signal_id = int(signal_id)
            if signal_id not in readouts[self.readout]["mapping"]:
                continue
            signal_type, position = readouts[self.readout]["mapping"][signal_id]
            is_x_signal = signal_type == "X"
            amplitude = np.max(values)  # amplitude goes from 0 to 4095
            amplitude = amplitude - min_value
            line_color = amplitude_to_color(amplitude)
            alpha = amplitude / 4095
            alpha *= 5.0 / 3.0
            alpha = np.clip(alpha, 0.1, 1.0)
            if is_x_signal:
                # vertical in X
                self.ax_right.plot(
                    [position, position],
                    [
                        readouts[self.readout]["limits"]["x"][0],
                        readouts[self.readout]["limits"]["x"][1],
                    ],
                    color=line_color,
                    alpha=alpha,
                    linewidth=line_width,
                )
            else:
                self.ax_right.plot(
                    [
                        readouts[self.readout]["limits"]["y"][0],
                        readouts[self.readout]["limits"]["y"][1],
                    ],
                    [position, position],
                    color=line_color,
                    alpha=alpha,
                    linewidth=line_width,
                )

        self.ax_right.set_xlabel("X (mm)")
        self.ax_right.set_ylabel("Y (mm)")

        extra_space = 2.0
        self.ax_right.set_xlim(
            readouts[self.readout]["limits"]["x"][0] - extra_space,
            readouts[self.readout]["limits"]["x"][1] + extra_space,
        )
        self.ax_right.set_ylim(
            readouts[self.readout]["limits"]["y"][0] - extra_space,
            readouts[self.readout]["limits"]["y"][1] + extra_space,
        )
        self.ax_right.set_aspect("equal")

        self.canvas.draw()

    def plot_event_time(self):
        entry = int(self.entry_textbox.get())
        self.current_entry = entry

        event = self.get_event_and_process(entry)

        self.clear_plots()

        bins_time = np.array(range(0, 512))
        n_bins = 100
        bins_x = np.linspace(
            readouts[self.readout]["limits"]["x"][0],
            readouts[self.readout]["limits"]["x"][1],
            n_bins,
        )
        bins_y = np.linspace(
            readouts[self.readout]["limits"]["y"][0],
            readouts[self.readout]["limits"]["y"][1],
            n_bins,
        )

        times_x = []
        times_y = []
        position_x = []
        position_y = []
        weights_x = []
        weights_y = []

        baseline_range = 0.2
        baseline_factor = int(baseline_range * len(event.signals.values[0]))

        for signal_id, values in zip(event.signals.id, event.signals.values):
            if int(signal_id) not in self.readout_signal_ids:
                continue

            values = np.asarray(values)
            baseline_level = np.mean(values[:baseline_factor])
            baseline_sigma = np.std(values[:baseline_factor])

            signal_type = readouts[self.readout]["mapping"][int(signal_id)][0]
            assert len(values) == 512, (
                f"Signal {signal_id} has {len(values)} bins, not 512"
            )
            for i in range(len(values)):
                value = values[i]
                if not value > baseline_level + 2.0 * baseline_sigma:
                    continue

                if signal_type == "X":
                    times_x.append(i)
                    position_x.append(
                        readouts[self.readout]["mapping"][int(signal_id)][1]
                    )
                    weights_x.append(value)
                else:
                    times_y.append(i)
                    position_y.append(
                        readouts[self.readout]["mapping"][int(signal_id)][1]
                    )
                    weights_y.append(value)

        self.ax_left.hist2d(
            position_x,
            times_x,
            bins=[bins_x, bins_time],
            weights=weights_x,
            cmap=white_jet,
        )

        self.ax_right.hist2d(
            position_y,
            times_y,
            bins=[bins_y, bins_time],
            weights=weights_y,
            cmap=white_jet,
        )

        self.figure.suptitle(f"Event {entry} - Position (X/Y) vs Time (Z)")

        self.ax_left.set_xlabel("X (mm)")
        self.ax_left.set_ylabel("Time bins")

        self.ax_right.set_xlabel("Y (mm)")
        self.ax_right.set_ylabel("Time bins")

        for ax in [self.ax_left, self.ax_right]:
            ax.set_ylim(0, 512)
            ax.set_yticks(range(0, 512 + 1, 64))
            ax.set_yticks(range(0, 512 + 1, 16), minor=True)

        self.canvas.draw()

    def plot_readout_observables(self):
        self.figure.suptitle(
            f"Observables computed for {len(self.observable_entries_processed)} entries out of {self.event_tree.num_entries}"
        )

        self.clear_plots()

        with lock:
            # sort self.observable_energy_estimate
            self.observable_energy_estimate.sort()
            # Remove 1% of the highest values to avoid outliers
            energy_estimate_quantile = 0.99

            observable_energy_estimate = self.observable_energy_estimate[
                : int(len(self.observable_energy_estimate) * energy_estimate_quantile)
            ]

            self.ax_left.hist(
                observable_energy_estimate,
                bins=50,
                linewidth=2.0,
                histtype="step",
                label="Energy Estimate",
                color="red",
            )

            # hit map
            n_bins = 100
            bins_x = np.linspace(
                readouts[self.readout]["limits"]["x"][0],
                readouts[self.readout]["limits"]["x"][1],
                n_bins,
            )
            bins_y = np.linspace(
                readouts[self.readout]["limits"]["y"][0],
                readouts[self.readout]["limits"]["y"][1],
                n_bins,
            )

            self.ax_right.hist2d(
                self.observable_hit_map_position_x,
                self.observable_hit_map_position_y,
                bins=[bins_x, bins_y],
                cmap="jet",
            )

        self.ax_left.set_xlabel("Energy (ADC)")
        self.ax_left.set_title("Energy in Readout (99th percentile)")
        self.ax_left.set_ylabel("Counts")

        self.ax_right.set_xlabel("X (mm)")
        self.ax_right.set_ylabel("Y (mm)")
        self.ax_right.set_title("Readout Hit Map")

        extra_space = 1.0
        self.ax_right.set_xlim(
            readouts[self.readout]["limits"]["x"][0] - extra_space,
            readouts[self.readout]["limits"]["x"][1] + extra_space,
        )
        self.ax_right.set_ylim(
            readouts[self.readout]["limits"]["y"][0] - extra_space,
            readouts[self.readout]["limits"]["y"][1] + extra_space,
        )
        self.ax_right.set_aspect("equal")

        self.canvas.draw()

    def plot_readout_activity_x_y(self):
        self.figure.suptitle(
            f"Observables computed for {len(self.observable_entries_processed)} entries out of {self.event_tree.num_entries}"
        )

        self.clear_plots()

        with lock:
            # all channel ids for X
            signal_ids_x = [
                signal_id
                for signal_id in self.observable_channel_activity.keys()
                if signal_id in self.readout_signal_ids
                and readouts[self.readout]["mapping"][signal_id][0] == "X"
            ]
            signal_ids_y = [
                signal_id
                for signal_id in self.observable_channel_activity.keys()
                if signal_id in self.readout_signal_ids
                and readouts[self.readout]["mapping"][signal_id][0] == "Y"
            ]

            positions_x = [
                readouts[self.readout]["mapping"][signal_id][1]
                for signal_id in signal_ids_x
            ]
            activity_x = [
                self.observable_channel_activity[signal_id]
                for signal_id in signal_ids_x
            ]

            positions_y = [
                readouts[self.readout]["mapping"][signal_id][1]
                for signal_id in signal_ids_y
            ]
            activity_y = [
                self.observable_channel_activity[signal_id]
                for signal_id in signal_ids_y
            ]

            self.ax_left.bar(
                positions_x, activity_x, color="blue", label="X", width=0.2
            )
            self.ax_right.bar(
                positions_y, activity_y, color="red", label="Y", width=0.2
            )

        self.ax_left.set_xlabel("X (mm)")
        self.ax_left.set_ylabel("Counts")
        self.ax_left.set_title("Readout Activity in X")

        self.ax_right.set_xlabel("Y (mm)")
        self.ax_right.set_ylabel("Counts")
        self.ax_right.set_title("Readout Activity in Y")

        extra_space = 2.0
        self.ax_left.set_xlim(
            readouts[self.readout]["limits"]["x"][0] - extra_space,
            readouts[self.readout]["limits"]["x"][1] + extra_space,
        )
        self.ax_right.set_xlim(
            readouts[self.readout]["limits"]["y"][0] - extra_space,
            readouts[self.readout]["limits"]["y"][1] + extra_space,
        )

        self.canvas.draw()

    def plot_channel_acitivty(self):
        self.figure.suptitle(
            f"Observables computed for {len(self.observable_entries_processed)} entries out of {self.event_tree.num_entries}"
        )

        self.clear_plots()

        with lock:
            # all channel ids for X
            signal_ids_all = set(self.observable_channel_activity.keys())
            # combine with signal ids from readout
            signal_ids_all = signal_ids_all.union(self.readout_signal_ids)
            signal_ids_all = list(signal_ids_all)

            signal_ids_readout = list(self.readout_signal_ids)

            # start in min, end in max and space 1
            signal_ids_all_range = list(
                range(min(signal_ids_all), max(signal_ids_all) + 1, 1)
            )

            signal_ids_readout_range = list(
                range(min(signal_ids_readout), max(signal_ids_readout) + 1, 1)
            )

            activity_signal_ids_all = [
                self.observable_channel_activity.get(signal_id, 0)
                for signal_id in signal_ids_all_range
            ]

            activity_readout = [
                (
                    self.observable_channel_activity.get(signal_id, 0)
                    if signal_id in self.readout_signal_ids
                    else 0
                )
                for signal_id in signal_ids_readout_range
            ]

            self.ax_left.step(
                signal_ids_readout_range,
                activity_readout,
                color="green",
                label="Readout",
                where="mid",
                linewidth=1,
            )
            self.ax_right.step(
                signal_ids_all_range,
                activity_signal_ids_all,
                color="orange",
                label="All",
                where="mid",
                linewidth=1,
            )

        self.ax_left.set_xlabel("Signal ID")
        self.ax_left.set_ylabel("Counts")
        self.ax_left.set_title("Activity in Readout")

        self.ax_right.set_xlabel("Signal ID")
        self.ax_right.set_ylabel("Counts")
        self.ax_right.set_title("Activity for all Signals")

        self.canvas.draw()

    def plot_graph(self):
        if not self.check_file():
            return

        try:
            selected = self.display_menu_selected.get()
            if selected == self.display_menu_options[0]:
                # Waveforms
                self.plot_waveforms()
            elif selected == self.display_menu_options[1]:
                # Event Time
                self.plot_event_time()
            elif selected == self.display_menu_options[2]:
                # Readout Observables
                self.plot_readout_observables()
            elif selected == self.display_menu_options[3]:
                # Readout Activity X/Y
                self.plot_readout_activity_x_y()
            elif selected == self.display_menu_options[4]:
                # Channel Activity
                self.plot_channel_acitivty()

        except ValueError as e:
            messagebox.showerror("Error", f"Invalid entry: {str(e)}")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred while plotting: {str(e)}")

    def update_entry(self, entry: int):
        self.current_entry = entry
        self.entry_textbox.delete(0, tk.END)
        self.entry_textbox.insert(0, str(entry))

    def prev_event(self):
        if not self.check_file():
            return

        if self.current_entry > 0:
            self.update_entry(self.current_entry - 1)
            self.plot_graph()
            # disable auto update
            self.auto_update_button.deselect()

    def next_event(self):
        if not self.check_file():
            return

        if self.current_entry == self.event_tree.num_entries - 1:
            self.load_file()
            self.plot_graph()

        if self.event_tree and self.current_entry < self.event_tree.num_entries - 1:
            self.update_entry(self.current_entry + 1)
            self.plot_graph()
            # disable auto update
            self.auto_update_button.deselect()

    def first_event(self):
        if not self.check_file():
            return

        self.auto_update_button.deselect()
        self.update_entry(0)
        self.plot_graph()

    def last_event(self):
        if not self.check_file():
            return

        self.load_file()
        self.auto_update_button.deselect()
        self.update_entry(self.event_tree.num_entries - 1)
        self.plot_graph()

    def random_event(self):
        if not self.check_file():
            return

        self.auto_update_button.deselect()
        self.load_file()
        self.update_entry(np.random.randint(0, self.event_tree.num_entries))
        self.plot_graph()


if __name__ == "__main__":
    # only 1 positional argument (optional) for filename
    parser = argparse.ArgumentParser(description="Event Viewer")
    parser.add_argument("filename", nargs="?", help="ROOT file to open")
    args = parser.parse_args()

    root = tk.Tk()

    global_font = font.Font(family="*Font", size=8)
    root.option_add("*Font", global_font)

    app = EventViewer(root)

    if args.filename:
        app.open_local_file(args.filename)

    root.mainloop()
